// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for both customers and admins
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer relationships
  orders    Order[]
  addresses Address[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// Address model for shipping
model Address {
  id       String @id @default(cuid())
  userId   String
  name     String
  street   String
  city     String
  region   String
  zipCode  String?
  country  String @default("Tanzania")
  phone    String?
  isDefault Boolean @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// Product categories
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

// Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  images      String[] // Array of image URLs
  categoryId  String
  inventory   Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  weight      Decimal? @db.Decimal(8, 2) // in kg
  unit        String?  // e.g., "bottle", "pack", "kg"
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  qrCode          String      @unique // QR code for tracking
  trackingHash    String      @unique // SHA256 hash for receipt verification
  userId          String
  addressId       String
  
  // Order details
  subtotal        Decimal     @db.Decimal(10, 2)
  shippingCost    Decimal?    @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  
  // Status tracking
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Admin notes
  adminNotes      String?
  
  user      User        @relation(fields: [userId], references: [id])
  address   Address     @relation(fields: [addressId], references: [id])
  items     OrderItem[]
  statusHistory OrderStatusHistory[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}

// Order items (products in an order)
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Price at time of order
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Order status history for tracking
model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

// Newsletter subscriptions
model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("newsletter")
}

// Contact form submissions
model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contact_submissions")
}
